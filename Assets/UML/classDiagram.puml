@startuml

' --- Config パッケージ ---
package Config {
    class ARPrefabRegistry
    note right of ARPrefabRegistry
        Prefab名からGameObjectを返す
        インターフェース
    end note

    class DefaultPrefabRegistry
    note right of DefaultPrefabRegistry
        名前→Prefabのマップを保持する
        ARPrefabRegistryの実装
    end note
}

' --- Factory パッケージ ---
package Factory {
    class ARObjectFactory {
        + Create(name: string, parent: Transform): void
    }
    note right of ARObjectFactory
        RegistryからPrefabを取得し
        インスタンスを生成・配置する
    end note
}

' --- Gesture パッケージ ---
package Gesture {
    interface IGestureHandler {
        + OnDragStart(startPos: Vector2)
        + OnDrag(delta: Vector2)
        + OnDragEnd(endPos: Vector2)
        + OnPinchStart(initialDistance: float)
        + OnPinch(scaleFactor: float)
        + OnPinchEnd()
    }
    note right of IGestureHandler
        ジェスチャー処理の
        Strategyインターフェース
    end note

    class PinchToScaleHandler {
        - initialScale : Vector3
        + OnPinchStart(initialDistance: float)
        + OnPinch(scaleFactor: float)
        + OnPinchEnd()
    }
    note right of PinchToScaleHandler
        ピンチ操作でオブジェクトを
        スケール制御
    end note

    class SwipeToRotateHandler {
        - targetRotation : Quaternion
        + rotationSpeed : float
        + OnDragStart(startPosition: Vector2)
        + OnDrag(delta: Vector2)
        + OnDragEnd(endPosition: Vector2)
    }
    note right of SwipeToRotateHandler
        ドラッグ操作でオブジェクトを
        X軸、Y軸回転
    end note
}

' --- Input パッケージ ---
package Input {
    class GestureInputManager {
        + static Instance : GestureInputManager
        - interactableLayerMask : LayerMask
        - mainCamera : Camera
        - activeHandlers : Dictionary<int, IGestureHandler>
        - pinchActive : bool
        - pinchHandler : IGestureHandler
        - initialPinchDistance : float
        + Update()
        - HandleSingleTouch(touch: Touch)
        - HandlePinch(touch1: Touch, touch2: Touch)
        - EndPinch()
    }
    note right of GestureInputManager
        タッチ入力を一元管理し、
        IGestureHandlerに通知
    end note
}

' --- Manager パッケージ ---
package Manager {
    class ImageTrackingController {
        + OnTrackedImageDetected(name: string)
    }
    note right of ImageTrackingController
        画像検出時にUIや他Managerを制御
    end note

    class ImageTrackingObjectManager {
        - trackedImageManager : ARTrackedImageManager
        + OnTrackedImagesChanged(args: ARTrackedImagesChangedEventArgs)
    }
    note right of ImageTrackingObjectManager
        ARマーカー検出を監視し、
        FactoryでPrefab生成・表示制御
    end note
}

' --- Unity組込みクラス ---
class GameObject
note right of GameObject
    Unityのシーンオブジェクト
end note

class ARTrackedImageManager
note right of ARTrackedImageManager
    ARTrackedImageの検出・更新イベント発行
end note

class ARTrackedImagesChangedEventArgs
note right of ARTrackedImagesChangedEventArgs
    画像追加・更新・削除リストを保持
end note

class Touch
note right of Touch
    タッチ情報(位置・フェーズ等)
end note

class LayerMask
note right of LayerMask
    Raycastフィルタ用のマスク
end note

class Camera
note right of Camera
    画面→ワールドのRayを生成
end note

' --- 関係 ---
GestureInputManager ..> IGestureHandler : calls
PinchToScaleHandler --|> IGestureHandler
SwipeToRotateHandler --|> IGestureHandler

ImageTrackingObjectManager o-- ARObjectFactory : uses
ImageTrackingObjectManager --> ARTrackedImageManager
ImageTrackingController --> ImageTrackingObjectManager : coordinates

GestureInputManager --> GameObject : raycasts to
GameObject --> IGestureHandler : has
ARObjectFactory --> GameObject : instantiates

GestureInputManager --> Touch : processes
GestureInputManager --> LayerMask : filters
GestureInputManager --> Camera : uses
ImageTrackingController --> ARTrackedImageManager : uses

@enduml
